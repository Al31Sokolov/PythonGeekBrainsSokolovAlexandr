"""Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами."""
def sal():
    try:

        worktime = float(input("Отработано в часах"))
        rate_per_hour = float(input("Ставка в час"))
        bonus = float(input("Премия"))
        salary = worktime * rate_per_hour + bonus
        print(f'заработная плата сотрудника  {salary}')
    except ValueError:
        return print('Неверное значение')
sal()

"""Представлен список чисел.
Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123]."""
my_list = [10, 11, 5, 12, 9, 3, 2, 1]
my_new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')

"""Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор."""
print(f'Числа от 20 до 240 кратные 20 или 21 - {[x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0]}')

"""Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]"""
list = [2, 2, 2, 2, 3, 5, 8, 8, 8, 8]
new_list = [y for y in list if list.count(y) < 2]
print(new_list)

"""Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()."""
from functools import reduce


def my_func(x_p, x):
    return x_p * x

print(f'Список четных значений {[x for x in range(99, 1001) if x % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [x for x in range(99, 1001) if x % 2 == 0])}')

"""Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено."""
from itertools import count

for el in count(int(input('Введите целое число, начиная с 3  '))):

    if el == 10:
         break
    print(el)
    
 """б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено"""
from itertools import cycle

list = [5, 3, 3, 1, 0, 4, 2, 4, 7, 3]
count=0
for i in cycle(list):
    if count >= 10:
        break
    else:
     print(i, end=' ')
    count+=1
    
"""Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа,
а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24."""
from itertools import count
from math import factorial

def fact():
    for el in count(1):
        yield factorial(el)

generator = fact()
n = int(input("Введите целое число n"))
x = 0
for i in generator:
    if x <= n:
        print(i)
        x += 1
    else:
        break    
