"""
Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
В рамках класса реализовать два метода.
Первый, с декоратором @classmethod, должен извлекать число, месяц, год и преобразовывать их тип к типу «Число».
Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12).
Проверить работу полученной структуры на реальных данных.
"""


class Data:
    def __init__(self, day_month_year):

        self.day_month_year = str(day_month_year)

    @classmethod
    def extract(cls, day_month_year):
        my_date = []

        for i in day_month_year.split():
            if i != '-': my_date.append(i)

        return int(my_date[0]), int(my_date[1]), int(my_date[2])

    @staticmethod
    def valid(day, month, year):

        if 1 <= day <= 31:
            if 1 <= month <= 12:
                if 2022 >= year >= 0:
                    return f'All right'
                else:
                    return f'Вы ввели еще не наступивший год или год до нашей эры'
            else:
                return f'Вы ввели несуществующий месяц. Месяцев всего 12'
        else:
            return f'В этом месяце нет такого дня'

    def __str__(self):
        return f'Текущая дата {Data.extract(self.day_month_year)}'


today = Data('13 - 1 - 2022')
print(today)
print(Data.valid(12, 12, 2024))
print(today.valid(13, 1, 2022))
print(Data.extract('12 - 10 - 2011'))
print(today.extract('10 - 10 - 2010'))
print(Data.valid(3, 10, 2003))

"""
Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль.
Проверьте его работу на данных, вводимых пользователем.
При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.
"""
class DivisionByZero:
    def __init__(self, div_1, div_2):
        self.div_1 = div_1
        self.div_2 = div_2

    @staticmethod
    def divide_by_zero(div_1, div_2):
        try:
            return (div_1 / div_2)
        except:
            return (f"На ноль делить нельзя")


num_1 = int(input("Введите делимое "))
num_2 = int(input("Введите делитель "))
print(DivisionByZero.divide_by_zero(num_1, num_2))

"""
Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список только числами.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число.
 Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class Error:
    def __init__(self, *args):
        self.my_list = []

    def my_input(self):
        while True:
            try:
                val = int(input('Введите значения и нажимайте Enter - '))
                self.my_list.append(val)
                print(f'Текущий список - {self.my_list} \n ')
            except:
                print(f"Недопустимое значение - строка и булево")
                finish = input(f'Попробовать еще раз? Y/N')

                if finish == 'Y' or finish == 'y':
                    print(try_except.my_input())
                elif finish == 'N' or finish == 'n':
                    return f'Вы вышли'
                else:
                    return f'Вы вышли'


try_except = Error(1)
print(try_except.my_input())

"""
1. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
А также класс «Оргтехника», который будет базовым для классов-наследников.
Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
В базовом классе определить параметры, общие для приведенных типов.
В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.
2. Продолжить работу над первым заданием.
Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных,
можно использовать любую подходящую структуру, например словарь.
3. Продолжить работу над вторым заданием.
Реализуйте механизм валидации вводимых пользователем данных.
Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
"""
class StorePrinters:

    def __init__(self, name, price, quantity, number_of_lists, *args):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.numb = number_of_lists
        self.my_store_full = []
        self.my_store = []
        self.my_unit = {'Модель устройства': self.name, 'Цена за ед': self.price, 'Количество': self.quantity}

    def __str__(self):
        return f'{self.name} цена {self.price} количество {self.quantity}'


    def reception(self):
        try:
            unit = input(f'Введите наименование ')
            unit_p = int(input(f'Введите цену за ед '))
            unit_q = int(input(f'Введите количество '))
            unique = {'Модель устройства': unit, 'Цена за ед': unit_p, 'Количество': unit_q}
            self.my_unit.update(unique)
            self.my_store.append(self.my_unit)
            print(f'Текущий список -\n {self.my_store}')
        except:
            return f'Ошибка ввода данных'

        print(f'Для выхода - Q, продолжение - Enter')
        q = input(f'---> ')
        if q == 'Q' or q == 'q':
            self.my_store_full.append(self.my_store)
            print(f'Весь склад -\n {self.my_store_full}')
            return f'Выход'
        else:
            return StorePrinters.reception(self)


class PrinterA4(StorePrinters):
    def to_print_a4(self):
        return f'to print smth {self.numb} times'


class PrinterA3(StorePrinters):
    def to_print_a3(self):
        return f'to print smth {self.numb} times'


class WorkCenter(StorePrinters):
    def to_print_wc(self):
        return f'to print smth  {self.numb} times'


unit_1 = PrinterA4('hp 1102', 3000, 3, 5)
unit_2 = PrinterA3('Canon 1133', 25000, 5, 8)
unit_3 = WorkCenter('Xerox 5019', 60000, 1, 13)
print(unit_1.reception())
print(unit_2.reception())
print(unit_3.reception())
print(unit_1.to_print_a4())
print(unit_3.to_print_wc())

"""
Реализовать проект «Операции с комплексными числами».
Создайте класс «Комплексное число», реализуйте перегрузку методов сложения и умножения комплексных чисел.
Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение созданных экземпляров.
Проверьте корректность полученного результата.
"""
class ComplexNumber:
    def __init__(self, a, b, *args):
        self.a = a
        self.b = b
        self.z = a + b * i

    def __add__(self, other):

        print(f'Сумма z1 и z2 =')
        return f'z = {self.a + other.a} + {self.b + other.b} * {i}'

    def __mul__(self, other):
        print(f'Произведение z1 и z2 =')
        return f'z = {self.a * other.a - (self.b * other.b)} + {self.b * other.a} * {i}'

    def __str__(self):
        return f'z = {self.a} + {self.b} * {i}'

i = int(input("Введите чило i"))
z_1 = ComplexNumber(1, 2)
z_2 = ComplexNumber(5, 5)
print(z_1)
print(z_1 + z_2)
print(z_1 * z_2)
